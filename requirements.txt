
#### requirements.txt en Français

```name=translations/fr/requirements.txt
requests
psycopg2-binary
beautifulsoup4
pandas
scikit-learn
matplotlib
```

#### Script d'analyse et de modélisation en Français

```python name=translations/fr/analyze_model_data.py
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_curve, auc

# Charger les données
data = pd.read_csv('airplane_crashes.csv')

# Prétraitement des données
# (Inclure le nettoyage des données, l'ingénierie des caractéristiques et la normalisation ici)

# Diviser les données en ensembles d'entraînement et de test
X = data.drop('target', axis=1)  # Remplacer 'target' par le nom réel de la colonne cible
y = data['target']  # Remplacer 'target' par le nom réel de la colonne cible
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Définir les modèles
models = {
    'Régression Logistique': LogisticRegression(),
    'Forêt d'Arbres Décisionnels': RandomForestClassifier(),
    'Gradient Boosting': GradientBoostingClassifier(),
    'SVM': SVC(probability=True)
}

# Entraîner et évaluer les modèles
results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_prob = model.predict_proba(X_test)[:, 1] if hasattr(model, 'predict_proba') else None
    
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    
    results[name] = {
        'exactitude': accuracy,
        'précision': precision,
        'rappel': recall,
        'f1_score': f1
    }
    
    print(f"{name} - Exactitude : {accuracy}, Précision : {precision}, Rappel : {recall}, F1-Score : {f1}")
    
    if y_prob is not None:
        fpr, tpr, _ = roc_curve(y_test, y_prob)
        roc_auc = auc(fpr, tpr)
        plt.plot(fpr, tpr, label=f'{name} (AUC = {roc_auc:.2f})')

# Tracer la courbe ROC
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('Taux de Faux Positifs')
plt.ylabel('Taux de Vrais Positifs')
plt.title('Courbe ROC')
plt.legend(loc='lower right')
plt.show()
```

### Traductions en Allemand et Espagnol

Vous pouvez suivre le même format pour traduire les autres documents en Allemand (`de`) et en Espagnol (`es`). Assurez-vous de conserver la structure du répertoire et de traduire chaque fichier de manière cohérente.

### Organisation des Fichiers

Organisez les fichiers traduits dans les dossiers spécifiques à chaque langue comme indiqué dans la structure du répertoire ci-dessus.

Si vous avez des questions supplémentaires ou besoin d'aide pour les traductions spécifiques, n'hésitez pas à me le faire savoir !
